name: ðŸ§ª Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-qt pytest-cov pytest-mock
        pip install -r requirements.txt || echo "requirements.txt not found"
        pip install -e . || echo "No setup.py found"
    
    - name: Run basic tests
      run: |
        python -m pytest tests/test_basic.py tests/test_quick_check.py -v
      
    - name: Run core tests
      run: |
        python -m pytest tests/test_core.py -v
      
    - name: Run petrophysics tests
      run: |
        python -m pytest tests/test_petrophysics.py -v
        
    - name: Run GUI tests (Linux)
      if: runner.os == 'Linux'
      run: |
        xvfb-run -a python -m pytest tests/test_gui.py -v
        
    - name: Run GUI tests (Non-Linux)
      if: runner.os != 'Linux'
      run: |
        python -m pytest tests/test_gui.py -v
      
    - name: Run integration tests
      run: |
        python -m pytest tests/test_integration.py -v -m "not slow"
        
    - name: Generate coverage report
      run: |
        python -m pytest tests/ --cov=src --cov-report=xml --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy isort
    
    - name: Run black
      run: |
        black --check --diff src/ tests/
    
    - name: Run flake8
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503
    
    - name: Run isort
      run: |
        isort --check-only --diff src/ tests/
    
    - name: Run mypy
      run: |
        mypy src/ --ignore-missing-imports || echo "MyPy completed with warnings"

  docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme
        pip install -r requirements.txt || echo "requirements.txt not found"
    
    - name: Check documentation build
      run: |
        # Basic check that documentation files exist
        test -f README.md
        test -f CONTRIBUTING.md
        test -f docs/MANUAL_USUARIO.md || echo "Manual not found"
        test -f docs/API_REFERENCE.md || echo "API reference not found"
        echo "Documentation files check completed"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check || echo "Safety check completed with warnings"
    
    - name: Run bandit security check
      run: |
        bandit -r src/ -f json -o bandit-report.json || echo "Bandit completed"
        bandit -r src/ || echo "Bandit check completed"
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
