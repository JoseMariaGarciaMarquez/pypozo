#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de las nuevas funcionalidades de PyPozo 2.0
===============================================

Prueba espec√≠fica de:
1. plot_curves_together - Graficar curvas juntas
2. Detecci√≥n autom√°tica de curvas el√©ctricas por unidades
3. Aplicaci√≥n autom√°tica de escala logar√≠tmica
4. Visualizaci√≥n de unidades en las etiquetas
"""

import sys
from pathlib import Path

# Agregar src al path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from pypozo import WellManager, WellPlotter

def main():
    print("üöÄ PyPozo 2.0 - Test de Nuevas Funcionalidades")
    print("=" * 60)
    
    # Cargar pozo con curvas el√©ctricas
    pozo_file = "data/PALO BLANCO 791_PROCESADO.las"
    
    try:
        well = WellManager.from_las(pozo_file)
        plotter = WellPlotter()
        
        print(f"‚úÖ Pozo cargado: {well.name}")
        print(f"üìä Total de curvas: {len(well.curves)}")
        
        # 1. Mostrar informaci√≥n de unidades y detecci√≥n el√©ctrica
        print(f"\nüìã An√°lisis de Unidades y Detecci√≥n El√©ctrica:")
        print("-" * 50)
        
        electrical_curves = []
        for curve in well.curves[:15]:  # Primeras 15 curvas
            units = well.get_curve_units(curve)
            is_electrical = plotter._is_electrical_curve(curve, well)
            
            status = "‚ö° EL√âCTRICA" if is_electrical else ""
            print(f"  {curve:12s} | {units:15s} | {status}")
            
            if is_electrical:
                electrical_curves.append(curve)
        
        print(f"\n‚ö° Curvas el√©ctricas detectadas: {electrical_curves}")
        
        # 2. Probar plot_curves_together sin normalizar (con unidades originales)
        if len(electrical_curves) >= 2:
            print(f"\nüîó Test 1: Graficando curvas el√©ctricas juntas (valores originales)")
            result = plotter.plot_curves_together(
                well,
                curves=electrical_curves[:3],  # M√°ximo 3
                title="Curvas El√©ctricas - Valores Originales con Escala Log",
                normalize=False,
                use_log_scale=True,
                save_path=Path("test_electricas_originales.png")
            )
            if result:
                print(f"‚úÖ Guardado: {result}")
            
            # 3. Probar plot_curves_together normalizado
            print(f"\nüîó Test 2: Graficando curvas el√©ctricas juntas (normalizadas)")
            result = plotter.plot_curves_together(
                well,
                curves=electrical_curves[:3],
                title="Curvas El√©ctricas - Normalizadas",
                normalize=True,
                use_log_scale=False,
                save_path=Path("test_electricas_normalizadas.png")
            )
            if result:
                print(f"‚úÖ Guardado: {result}")
        
        # 4. Probar plot_well_logs_enhanced (detecci√≥n autom√°tica)
        if electrical_curves:
            print(f"\nüìä Test 3: plot_well_logs_enhanced (detecci√≥n autom√°tica de log)")
            result = plotter.plot_well_logs_enhanced(
                well,
                curves=electrical_curves[:4],  # M√°ximo 4 subplots
                title="Registros El√©ctricos - Escala Log Autom√°tica",
                save_path=Path("test_enhanced_auto.png")
            )
            if result:
                print(f"‚úÖ Guardado: {result}")
        
        # 5. Probar con curvas no el√©ctricas para contrastar
        non_electrical = ["GR", "SP", "CAL", "DPHI"]
        available_non_elec = [c for c in non_electrical if c in well.curves]
        
        if available_non_elec:
            print(f"\nüìä Test 4: Curvas no el√©ctricas (sin escala log)")
            result = plotter.plot_curves_together(
                well,
                curves=available_non_elec,
                title="Curvas No El√©ctricas - Escala Lineal",
                normalize=False,
                save_path=Path("test_no_electricas.png")
            )
            if result:
                print(f"‚úÖ Guardado: {result}")
        
        print(f"\nüéØ Test Completado")
        print("Las im√°genes muestran:")
        print("‚Ä¢ Curvas el√©ctricas con escala logar√≠tmica autom√°tica")
        print("‚Ä¢ Unidades en las etiquetas del eje X")
        print("‚Ä¢ Opci√≥n de normalizaci√≥n para comparaci√≥n visual")
        print("‚Ä¢ Detecci√≥n autom√°tica basada en unidades y nombres")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
