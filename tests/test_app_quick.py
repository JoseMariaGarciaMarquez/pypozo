#!/usr/bin/env python3
"""
Script de prueba r√°pida para verificar que PyPozo App funciona.
"""

import sys
import os

def test_imports():
    """Probar todos los imports necesarios."""
    print("üîç Probando imports...")
    
    try:
        # Imports b√°sicos
        import sys
        import os
        from pathlib import Path
        import logging
        import numpy as np
        print("‚úÖ Imports b√°sicos OK")
        
        # PyQt5
        from PyQt5.QtWidgets import QApplication
        print("‚úÖ PyQt5 OK")
        
        # Matplotlib
        import matplotlib
        matplotlib.use('Qt5Agg')
        from matplotlib.figure import Figure
        from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
        print("‚úÖ Matplotlib OK")
        
        # PyPozo modules
        from src.pypozo.core.well import WellManager, WellDataFrame
        from src.pypozo.visualization.plotter import WellPlotter
        from src.pypozo.petrophysics import VclCalculator, PorosityCalculator
        from src.pypozo.petrophysics import WaterSaturationCalculator, PermeabilityCalculator, LithologyAnalyzer
        print("‚úÖ PyPozo modules OK")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de import: {e}")
        return False

def test_app_init():
    """Probar inicializaci√≥n de la aplicaci√≥n."""
    print("\nüöÄ Probando inicializaci√≥n de la aplicaci√≥n...")
    
    try:
        # Import the app and required PyQt5
        from PyQt5.QtWidgets import QApplication
        from pypozo_app import PyPozoApp, PYQT5_AVAILABLE
        
        if not PYQT5_AVAILABLE:
            print("‚ùå PyQt5 no disponible")
            return False
        
        # Create QApplication
        app = QApplication([])
        
        # Create main window
        window = PyPozoApp()
        print("‚úÖ Ventana principal creada")
        
        # Basic checks
        assert hasattr(window, 'wells'), "Debe tener atributo wells"
        assert hasattr(window, 'current_well'), "Debe tener atributo current_well"
        assert hasattr(window, 'figure'), "Debe tener atributo figure"
        print("‚úÖ Atributos b√°sicos presentes")
        
        # Check UI components
        assert hasattr(window, 'wells_tree'), "Debe tener wells_tree"
        assert hasattr(window, 'curves_list'), "Debe tener curves_list"
        assert hasattr(window, 'petro_tabs'), "Debe tener petro_tabs"
        print("‚úÖ Componentes UI presentes")
        
        print("‚úÖ Inicializaci√≥n exitosa!")
        
        # Don't show the window in test mode
        # window.show()
        
        app.quit()
        return True
        
    except Exception as e:
        print(f"‚ùå Error inicializando aplicaci√≥n: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal de prueba."""
    print("üß™ PRUEBA R√ÅPIDA DE PYPOZO APP")
    print("=" * 40)
    
    # Test 1: Imports
    if not test_imports():
        print("\n‚ùå FALLO: Problemas con imports")
        return False
    
    # Test 2: App initialization
    if not test_app_init():
        print("\n‚ùå FALLO: Problemas inicializando aplicaci√≥n")
        return False
    
    print("\nüéâ TODAS LAS PRUEBAS EXITOSAS!")
    print("La aplicaci√≥n PyPozo est√° lista para usar.")
    print("\nPara ejecutar la GUI:")
    print("python pypozo_app.py")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
