#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de Fusi√≥n de Pozos - Usando Archivos Originales
===================================================

Test espec√≠fico para validar la funcionalidad de fusi√≥n autom√°tica
usando los archivos reales en la carpeta data/Originales/

Autor: Jos√© Mar√≠a Garc√≠a M√°rquez
Fecha: Julio 2025
"""

import sys
import logging
from pathlib import Path
import matplotlib.pyplot as plt

# Agregar src al path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "src"))

from pypozo import WellManager, WellPlotter

def setup_logging():
    """Configurar logging para el test."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(levelname)s - %(message)s'
    )

def test_fusion_archivos_originales():
    """
    Test de fusi√≥n usando archivos reales de la carpeta Originales.
    
    Este test:
    1. Carga m√∫ltiples archivos LAS del pozo Abedul-1
    2. Los fusiona autom√°ticamente
    3. Crea visualizaciones comparativas
    4. Valida la integridad de la fusi√≥n
    """
    print("üöÄ Test de Fusi√≥n - Archivos Originales del Pozo Abedul-1")
    print("=" * 60)
    
    # Ruta a archivos originales
    originales_path = project_root / "data" / "Originales"
    
    if not originales_path.exists():
        print("‚ùå Carpeta 'data/Originales' no encontrada")
        return False
    
    # Buscar archivos LAS del Abedul-1 (filtrar archivos del sistema)
    all_las_files = list(originales_path.glob("*abedul*.las"))
    las_files = [f for f in all_las_files if not f.name.startswith('._')]
    
    if not las_files:
        print("‚ùå No se encontraron archivos LAS del Abedul-1")
        print(f"   (Se encontraron {len(all_las_files)} archivos totales, pero todos son archivos del sistema)")
        return False
    
    print(f"üìÅ Encontrados {len(las_files)} archivos LAS:")
    for i, file in enumerate(las_files, 1):
        print(f"   {i}. {file.name}")
    
    # Cargar pozos
    wells = []
    well_names = []
    
    print(f"\\nüìÇ Cargando archivos...")
    for las_file in las_files[:3]:  # Limitar a 3 archivos para el test
        try:
            print(f"   üìÑ Cargando: {las_file.name}")
            well = WellManager.from_las(str(las_file))
            
            if well and well.curves:
                wells.append(well)
                well_names.append(well.name or las_file.stem)
                
                # Mostrar informaci√≥n del pozo
                depth_range = well.depth_range
                print(f"      ‚úÖ Cargado: {well.name}")
                print(f"      üìè Rango: {depth_range[0]:.1f}-{depth_range[1]:.1f}m")
                print(f"      üìà Curvas: {len(well.curves)}")
            else:
                print(f"      ‚ùå Error: No se pudo cargar o no tiene curvas")
                
        except Exception as e:
            print(f"      ‚ùå Error cargando {las_file.name}: {str(e)}")
    
    if len(wells) < 2:
        print(f"\\n‚ùå Se necesitan al menos 2 pozos para fusi√≥n. Solo se cargaron {len(wells)}")
        return False
    
    print(f"\\nüîÑ Iniciando fusi√≥n de {len(wells)} pozos...")
    
    # Fusionar pozos
    try:
        merged_well = WellManager.merge_wells(wells, "ABEDUL1_FUSION_TEST")
        
        if merged_well:
            merged_range = merged_well.depth_range
            print("‚úÖ Fusi√≥n completada exitosamente!")
            print(f"   üéØ Rango fusionado: {merged_range[0]:.1f}-{merged_range[1]:.1f}m")
            print(f"   üìà Total de curvas: {len(merged_well.curves)}")
            print(f"   üìã Curvas fusionadas: {', '.join(merged_well.curves)}")
            
            # Informaci√≥n de traslapes
            if 'overlaps_processed' in merged_well.metadata:
                overlaps = merged_well.metadata['overlaps_processed']
                print(f"   üîÑ Traslapes procesados: {overlaps}")
            
            # Informaci√≥n de archivos originales
            if 'original_files' in merged_well.metadata:
                files = merged_well.metadata['original_files']
                print(f"   üìÅ Archivos originales: {len(files)}")
                for i, file in enumerate(files, 1):
                    print(f"      {i}. {Path(file).name}")
        else:
            print("‚ùå Error durante la fusi√≥n")
            return False
            
    except Exception as e:
        print(f"‚ùå Error fusionando pozos: {str(e)}")
        return False
    
    # Crear gr√°fico comparativo
    print(f"\\nüìä Creando gr√°fico comparativo...")
    
    try:
        plotter = WellPlotter()
        
        # Buscar curva com√∫n para comparaci√≥n
        common_curves = set(wells[0].curves)
        for well in wells[1:]:
            common_curves = common_curves.intersection(set(well.curves))
        
        if common_curves:
            comparison_curve = list(common_curves)[0]
            print(f"   üìà Usando curva: {comparison_curve}")
            
            # Crear figura
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 8))
            
            # Subplot 1: Pozos originales
            colors = ['blue', 'red', 'green', 'orange', 'purple']
            for i, well in enumerate(wells):
                curve_data = well.get_curve_data(comparison_curve)
                if curve_data is not None:
                    ax1.plot(curve_data.values, curve_data.index, 
                            color=colors[i % len(colors)], linewidth=1.5, 
                            label=f"{well.name or f'Pozo {i+1}'}", alpha=0.7)
            
            ax1.set_xlabel(comparison_curve)
            ax1.set_ylabel('Profundidad (m)')
            ax1.set_title('Pozos Originales')
            ax1.invert_yaxis()
            ax1.grid(True, alpha=0.3)
            ax1.legend()
            
            # Subplot 2: Pozo fusionado
            merged_curve_data = merged_well.get_curve_data(comparison_curve)
            if merged_curve_data is not None:
                ax2.plot(merged_curve_data.values, merged_curve_data.index, 
                        color='black', linewidth=2, label='Pozo Fusionado')
            
            ax2.set_xlabel(comparison_curve)
            ax2.set_ylabel('Profundidad (m)')
            ax2.set_title('Pozo Fusionado')
            ax2.invert_yaxis()
            ax2.grid(True, alpha=0.3)
            ax2.legend()
            
            plt.suptitle(f'Comparaci√≥n de Fusi√≥n - {comparison_curve}', fontsize=16, fontweight='bold')
            plt.tight_layout()
            
            # Guardar gr√°fico
            output_file = project_root / f"test_fusion_originales_comparison.png"
            plt.savefig(output_file, dpi=300, bbox_inches='tight')
            print(f"   ‚úÖ Gr√°fico guardado: {output_file.name}")
            
            plt.close()
            
        else:
            print("   ‚ö†Ô∏è No se encontraron curvas comunes para comparaci√≥n")
    
    except Exception as e:
        print(f"   ‚ùå Error creando gr√°fico: {str(e)}")
    
    # Intentar guardar pozo fusionado
    print(f"\\nüíæ Guardando pozo fusionado...")
    try:
        output_las = project_root / "ABEDUL1_FUSION_TEST.las"
        success = merged_well.save_merged_well(str(output_las))
        
        if success:
            print(f"   ‚úÖ Pozo fusionado guardado: {output_las.name}")
        else:
            print(f"   ‚ö†Ô∏è No se pudo guardar el archivo LAS")
            
    except Exception as e:
        print(f"   ‚ùå Error guardando: {str(e)}")
    
    print(f"\\nüéâ Test completado exitosamente!")
    print(f"\\nüí° Para probar en la GUI:")
    print(f"   1. Ejecute: python pypozo_app.py")
    print(f"   2. Cargue los archivos de data/Originales/")
    print(f"   3. El sistema detectar√° autom√°ticamente duplicados del mismo pozo")
    print(f"   4. Elija 'S√≠' para fusionar autom√°ticamente")
    
    return True

def main():
    """Funci√≥n principal del test."""
    setup_logging()
    
    try:
        success = test_fusion_archivos_originales()
        
        if success:
            print("\\n‚úÖ Todos los tests pasaron correctamente")
            return 0
        else:
            print("\\n‚ùå Algunos tests fallaron")
            return 1
            
    except Exception as e:
        print(f"\\n‚ùå Error durante el test: {str(e)}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
